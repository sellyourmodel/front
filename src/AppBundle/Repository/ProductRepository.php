<?php

namespace AppBundle\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get from category
     *
     * @return array
     */
    public function getByCategory($category, $sortArray)
    {
        $qb = $this->_baseQb();

        $qb
            ->andWhere('p.category = :category OR p.category2 = :category OR p.category3 = :category OR p.category4 = :category OR p.category5 = :category')
            ->setParameter('category', $category)
        ;

        if(is_array($sortArray)){
            $keys = array_keys($sortArray);
            $values = array_values($sortArray);
            $qb->orderBy('p.'.$keys[0], $values[0]);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Get from category
     *
     * @return array
     */
    public function getByCategories($categories)
    {
        $qb = $this->_baseQb();

        $qb
            ->andWhere('p.category IN (:categories)')
            ->setParameter('categories', $categories)
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * Get by tag
     *
     * @return array
     */
    public function getByTag($tag)
    {
        $qb = $this->_baseQb();
        $qb->leftJoin('p.tags', 't');

        $qb
            ->andWhere('t.id = :tag')
            ->setParameter('tag', $tag)
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * Get by tag
     *
     * @return array
     */
    public function getForModeration()
    {
        $qb = $this->_baseQb();

        $qb->orderBy('p.date', 'DESC');

        $qb->setParameter('moderated', false);

        return $qb->getQuery()->getResult();
    }

    /**
     * New Products
     *
     * @return array
     */
    public function getNew($limit = NULL)
    {

        if(!$limit){
            $limit = 100;
        }

        $qb = $this->_baseQb();

        $qb->orderBy('p.date', 'DESC');
        $qb->setMaxResults($limit);

        return $qb->getQuery()
            ->getResult();
    }

    /**
     * New Products
     *
     * @return array
     */
    public function getBest($limit = NULL)
    {

        if(!$limit){
            $limit = 100;
        }

        $qb = $this->_baseQb();

        $qb->orderBy('p.stars', 'DESC');
        $qb->setMaxResults($limit);

        return $qb->getQuery()
            ->getResult();
    }

    /**
     * Find By Categories.
     *
     * @return array
     */
    public function getSearch($search, $limit = false)
    {

        $qb = $this->_baseQb();

        if ($search) {

            $a = explode(' ',$search);

            for($i=0;$i<count($a);$i++){
                $qb->andWhere('p.name LIKE :search'.$i)
                    ->setParameter('search'.$i, '%'.$a[$i].'%');
            }
        }

        if($limit){
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()
            ->getResult();
    }

    private function _baseQb()
    {
        $qb = $this->createQueryBuilder('p');

        $qb
            ->andWhere('p.active = true')
            ->andWhere('p.moderated = :moderated')
            ->andWhere('p.deleted = false')
            ->andWhere('p.block = :block')
            ->setParameter('moderated', true)
            ->setParameter('block', false)
        ;

        $qb->orderBy('p.date', 'DESC');

        return $qb;
    }
}
